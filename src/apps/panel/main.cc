
//////////////////////////////////////////////////////////////////////
// This is a driver ViewKit program generated by RapidApp 

//
// This program instantiates a ViewKit VkApp object and creates
// any main window objects that are meant to be shown at startup.
// There should rarely be a reason to modify this file.
// Make application-specific changes in the classes created
// by the main window classes
// Some applications may wish to change this code to instantiate
// a different application class, however.
//////////////////////////////////////////////////////////////////////


//NEW to make this application run correctly you must run 
//           xrdb -merge Application
// This should be placed into a script to run the program


#include <Vk/VkApp.h>
#include <iostream.h>
#include <Xm/TextF.h> 

// Headers for classes used in this program

#include "SubControllWindowMainWindow.h"


#include <idunetlib.h> //COMMS
#include <idu.h>       //COMMS

SUB_MSG_DATA *packet;
NPSNETToSubIDU      *updatesubidu;
HelmToNPSNETIDU      helmidu;
SubOodToNPSNETIDU    oodidu;
WeapsToNPSNETIDU     weapsidu;
IDU_net_manager *net;

void main ( int argc, char **argv )
{
    extern void InitEZ(void);

    InitEZ();

    VkApp       *app;

 //COMMS----------------------------------------------   
    int op = 0 ;
    extern char *optarg;
    extern int optind, operr;

    // Multicast Defaults
    int multicast = TRUE;
    u_short port;
    char group[25];
    u_char ttl = IDU_DEF_MC_TTL;
    port = 0;
    int loopback = TRUE;

    char net_interface[20];
    

    //initialize global data structures
    helmidu.helm_speed = 0;  
    helmidu.space_holder = 0;
    helmidu.space_holder2 = 0;
    helmidu.space_holder3 = 0;

    oodidu.ood_depth = 0;   
    oodidu.ood_course = 0;  
    oodidu.ood_speed = 0;   
    oodidu.ood_embtblow_onoff = 0;    
    oodidu.ood_mbtvents_openshut = 0; 
    oodidu.ood_scope_raiselower = 0;  
    oodidu.ood_scope_updown = 0;      
    oodidu.ood_scope_leftright = 0;   
    oodidu.ood_scope_mark = 0;        
    oodidu.space_holder = 0;

    
    weapsidu.weaps_select_tube_2or4 = 1;  
    weapsidu.weaps_select_tube_1or3 = 1;  
    weapsidu.weaps_course_port = 0;
    weapsidu.weaps_shoot_port = 0;
    weapsidu.weaps_course_stbd = 0;
    weapsidu.weaps_shoot_stbd = 0;
    weapsidu.weaps_select_tlam = 1;
    weapsidu.weaps_shoot_tlam = 0;
    weapsidu.space_holder = 0;
    weapsidu.space_holder2 = 0;
    weapsidu.space_holder3 = 0;

 //COMMS----------------------------------------------   

    strncpy ( group, IDU_DEF_MC_GROUP,25 );   //COMMS
    strcpy ( net_interface, "" );             //COMMS

 //COMMS----------------------------------------------   
   while ((op = getopt(argc, argv, "P:p:G:g:T:t:BblLI:i:")) != -1)
      {
      switch (op)
         {
         case 'p':
         case 'P':
            port = u_short(atoi(optarg));
            break;
         case 'G':
         case 'g':
            strncpy ( group, optarg, 25 );
            break;
         case 't':
         case 'T':
            ttl =  u_char(atoi(optarg));
            break;
         case 'b':
         case 'B':
            multicast = FALSE;
            break; 
         case 'l':
         case 'L':
            loopback = TRUE;
            break;
         case 'i':
         case 'I':
            strncpy ( net_interface, optarg, 19 );
            break;
         default:
            cerr << "Usage:  idudump [-p <network port>] \n"
                 << "                [-i <network interface>] \n"
                 << "                [-g <multicast group>] \n"
                 << "                [-t <multicast ttl>] \n"
                 << "                [-b   (to enable broadcast) \n";
            exit(0);
            break;
         }
      }

   if ( multicast )
      {
      if ( port == 0 )
         port = IDU_DEF_MC_PORT;
      net = new IDU_net_manager ( group, port, ttl, net_interface,
                                  loopback );
      }
   else
      {
      if ( port == 0 )
         port = IDU_DEF_BC_PORT;
      net = new IDU_net_manager ( port, net_interface, loopback );
      }

   if ( !net->net_open() )
      {
      cerr << "Could not open network." << endl;
      exit(0);
      }
   else
      {
      net->add_to_receive_list(Test_Type);
      net->add_to_receive_list(NPSNET_To_SUB_Type);
      }

   if ( multicast )
      {
      cerr << "\tMode:     \tMulticast" << endl;
      cerr << "\tPort:     \t" << (int)port << endl;
      cerr << "\tGroup:    \t" << group << endl;
      cerr << "\tTTL:      \t" << (int)ttl << endl;
      cerr << "\tInterface:\t" << net_interface << endl;
      cerr << "\tLoopback: \t";
      if ( loopback )
         cerr << "ON" << endl;
      else
         cerr << "OFF" << endl;
      cerr << endl;
      }
   else
      {
      cerr << "\tMode:     \tBroadcast" << endl;
      cerr << "\tPort:     \t" << (int)port << endl;
      cerr << "\tInterface:\t" << net_interface << endl << endl;
      cerr << "\tLoopback: \t";
      if ( loopback )
         cerr << "ON" << endl;
      else
         cerr << "OFF" << endl;
      cerr << endl;
      }
  //COMMS----------------------------------------------   


    //initialize packet
    packet = new SUB_MSG_DATA;
    
    // Create an application object
    app = new VkApp("Application", &argc, argv); 
 
    // Create the top level windows
    SubControllWindowMainWindow *subControllWindow  = new SubControllWindowMainWindow("subControllWindow");

    subControllWindow->show();
    
    app->run ();
}



