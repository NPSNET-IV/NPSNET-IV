
/////////////////////////////////////////////////////////////
//
// Source file for Weaps
//
//    This file is generated by RapidApp
//
//    This class is derived from WeapsUI which 
//    implements the user interface created in 
//    the interface builder. This class contains virtual
//    functions that are called from the user interface.
//
//    When you modify this source, limit your changes to 
//    modifying the emtpy virtual functions. You can also add
//    new functions below the "//--- End generated code section" markers
//
//    This will allow the builder to integrate changes more easily
//
//    This class is a ViewKit user interface "component".
//    For more information on how components are used, see the
//    "ViewKit Programmers' Manual", and the RapidApp
//    User's Guide.
/////////////////////////////////////////////////////////////

#include "global.h"
#include "Weaps.h"
#include <Vk/VkEZ.h>
#include <Xm/ArrowB.h> 
#include <Xm/Form.h> 
#include <Xm/Frame.h> 
#include <Xm/Label.h> 
#include <Xm/PushB.h> 
#include <Xm/RowColumn.h> 
#include <Xm/Separator.h> 
#include <Xm/TextF.h> 
#include <Xm/ToggleB.h> 
#include <Vk/VkResource.h>

#include <Vk/VkFormat.h> 
#include <stdlib.h>
#include <iostream.h>

extern void VkUnimplemented(Widget, const char *);

///////////////////////////////////////////////////////////////////////////////
// The following non-container widgets are created by WeapsUI and are
// available as protected data members inherited by this class
//
//  XmLabel		    _torpedo_label1
//  XmSeparator		    _separator2
//  XmPushButton		    _shoot_tlam_button
//  XmToggleButton		    _tlam1_toggle
//  XmToggleButton		    _tlam2_toggle
//  XmToggleButton		    _tlam3_toggle
//  XmToggleButton		    _tlam4_toggle
//  XmToggleButton		    _tlam5_toggle
//  XmToggleButton		    _tlam6_toggle
//  XmLabel		    _torpedo_label
//  XmLabel		    _select_label1
//  XmLabel		    _ready_label1
//  XmToggleButton		    _tube4_ready_toggle
//  XmToggleButton		    _tube2_ready_toggle
//  XmLabel		    _tube4_label
//  XmLabel		    _tube2_label
//  XmToggleButton		    _tube2_toggle
//  XmToggleButton		    _tube4_toggle
//  XmPushButton		    _shoot_port_button
//  XmSeparator		    _separator1
//  XmArrowButton		    _pt_crs_1s_dwn_arrow
//  XmArrowButton		    _pt_crs_10s_dwn_arrow1
//  XmArrowButton		    _pt_crs_100s_dwn_arrow0
//  XmTextField		    _pt_course_1s_textfield
//  XmTextField		    _pt_course_10s_textfield
//  XmTextField		    _pt_course_100s_textfield
//  XmArrowButton		    _pt_crs_1s_up_arrow
//  XmArrowButton		    _pt_crs_10s_up_arrow
//  XmArrowButton		    _pt_crs_100s_up_arrow
//  XmPushButton		    _shoot_stbd_button
//  XmLabel		    _select_label
//  XmArrowButton		    _st_crs_1s_dwn_arrow
//  XmArrowButton		    _st_crs_10s_dwn_arrow
//  XmArrowButton		    _st_crs_100s_dwn_arrow
//  XmArrowButton		    _st_crs_1s_up_arrow
//  XmArrowButton		    _st_crs_10s_up_arrow
//  XmArrowButton		    _st_crs_100s_up_arrow
//  XmTextField		    _st_course_1s_textfield
//  XmTextField		    _st_course_10s_textfield
//  XmTextField		    _st_course_100s_textfield
//  XmLabel		    _ready_label
//  XmToggleButton		    _tube3_ready_toggle
//  XmToggleButton		    _tube1_ready_toggle
//  XmLabel		    _tube3_label
//  XmLabel		    _tube1_label
//  XmToggleButton		    _tube1_toggle
//  XmToggleButton		    _tube3_toggle
//  XmTextField		    _actual_w_speed_textfield
//  XmTextField		    _actual_w_depth_textfield
//  XmTextField		    _actual_w_course_textfield
//  XmLabel		    _actual_weap_label
//  XmSeparator		    _actual_weap_separator
//  XmLabel		    _actual_w_speed_label
//  XmLabel		    _actual_w_depth_label
//  XmLabel		    _actual_w_course_label
//
///////////////////////////////////////////////////////////////////////////////


//---- End generated headers

extern NPSNETToSubIDU      *updatesubidu;
extern HelmToNPSNETIDU      helmidu;
extern SubOodToNPSNETIDU    oodidu;
extern WeapsToNPSNETIDU     weapsidu;
extern IDU_net_manager     *net;

//---- Weaps Constructor

Weaps::Weaps(const char *name, Widget parent) : 
                   WeapsUI(name, parent) 
{ 
    // This constructor is called after the component's interface has been built.

    //--- Add application code here:


} // End Constructor



Weaps::Weaps(const char *name) : 
                   WeapsUI(name) 
 { 
    // This constructor calls WeapsUI(name)
    // which does not create any widgets. Usually, this
    // constructor is not used

    //--- Add application code here:


} // End Constructor



Weaps::~Weaps()
{
    // The base class destructors are responsible for
    // destroying all widgets and objects used in this component.
    // Only additional items created directly in this class
    // need to be freed here.

    //--- Add application destructor code here:


}


const char * Weaps::className() // classname
{
    return ("Weaps");
} // End className()

void Weaps::update() 
{
    //actual depth,course,speed
    XmTextFieldSetString(_actual_w_depth_textfield,
                          (char *) VkFormat("%d",(int)updatesubidu->sub_depth));
    XmTextFieldSetString(_actual_w_course_textfield,
                         (char *) VkFormat("%d", (int)updatesubidu->sub_course));
    XmTextFieldSetString(_actual_w_speed_textfield,
                         (char *) VkFormat("%d", (int)updatesubidu->sub_speed));
  
    //port tube selected
    EZ(_tube4_toggle) = !((int)updatesubidu->sub_selecttube_2or4);
    EZ(_tube2_toggle) =  (int)updatesubidu->sub_selecttube_2or4;

    //stbd tube selected
    EZ(_tube3_toggle) = !((int)updatesubidu->sub_selecttube_1or3);
    EZ(_tube1_toggle) =  (int)updatesubidu->sub_selecttube_1or3;

    //tlam selected
    switch ((int)updatesubidu->sub_selecttlam)
        {
         case 1:
           EZ(_tlam1_toggle) = 1;
           EZ(_tlam2_toggle) = 0;
           EZ(_tlam3_toggle) = 0;
           EZ(_tlam4_toggle) = 0;
           EZ(_tlam5_toggle) = 0;
           EZ(_tlam6_toggle) = 0;
         break;

         case 2 :
           EZ(_tlam1_toggle) = 0;
           EZ(_tlam2_toggle) = 1;
           EZ(_tlam3_toggle) = 0;
           EZ(_tlam4_toggle) = 0;
           EZ(_tlam5_toggle) = 0;
           EZ(_tlam6_toggle) = 0;
         break;

         case 3:
           EZ(_tlam1_toggle) = 0;
           EZ(_tlam2_toggle) = 0;
           EZ(_tlam3_toggle) = 1;
           EZ(_tlam4_toggle) = 0;
           EZ(_tlam5_toggle) = 0;
           EZ(_tlam6_toggle) = 0;
         break;

         case 4:
           EZ(_tlam1_toggle) = 0;
           EZ(_tlam2_toggle) = 0;
           EZ(_tlam3_toggle) = 0;
           EZ(_tlam4_toggle) = 1;
           EZ(_tlam5_toggle) = 0;
           EZ(_tlam6_toggle) = 0;
         break;

         case 5:
           EZ(_tlam1_toggle) = 0;
           EZ(_tlam2_toggle) = 0;
           EZ(_tlam3_toggle) = 0;
           EZ(_tlam4_toggle) = 0;
           EZ(_tlam5_toggle) = 1;
           EZ(_tlam6_toggle) = 0;
         break;

         case -6:
           EZ(_tlam1_toggle) = 0;
           EZ(_tlam2_toggle) = 0;
           EZ(_tlam3_toggle) = 0;
           EZ(_tlam4_toggle) = 0;
           EZ(_tlam5_toggle) = 0;
           EZ(_tlam6_toggle) = 1;
         break;

         }

} // End update()

void Weaps::port_tube_shoot ( Widget w, XtPointer callData )
{
    XmAnyCallbackStruct *cbs = (XmAnyCallbackStruct*) callData;

    //--- Comment out the following line when Weaps::port_tube_shoot is implemented:

    //::VkUnimplemented ( w, "Weaps::port_tube_shoot" );


    //--- Add application code for Weaps::port_tube_shoot here:
    weapsidu.weaps_shoot_port = 1;
    if ( !(net->write_idu((char *)&weapsidu,SUB_Weaps_To_NPSNET_Type)) )
             cerr << "ERROR:\tCould not send Weaps IDU." << endl;
    weapsidu.weaps_shoot_port = 0;  //reset
} // End Weaps::port_tube_shoot()


void Weaps::pt_crs_100s_add ( Widget w, XtPointer callData )
{
    XmAnyCallbackStruct *cbs = (XmAnyCallbackStruct*) callData;

    //--- Comment out the following line when Weaps::pt_crs_100s_add is implemented:

    //::VkUnimplemented ( w, "Weaps::pt_crs_100s_add" );


    //--- Add application code for Weaps::pt_crs_100s_add here:
    int a = atoi (XmTextFieldGetString(_pt_course_100s_textfield));
    int b = atoi (XmTextFieldGetString(_pt_course_10s_textfield));
    int c = atoi (XmTextFieldGetString(_pt_course_1s_textfield));
    if ( a == 3 )
       a = -1;
    if ( (a+1) == 3 )
      {
       if ( b >= 6 )
         {
           XmTextFieldSetString(_pt_course_10s_textfield, (char *) VkFormat("%d", 0));
           XmTextFieldSetString(_pt_course_1s_textfield, (char *) VkFormat("%d", 0));
           b = 0;
           c = 0;
         }
      }
    XmTextFieldSetString(_pt_course_100s_textfield, (char *) VkFormat("%d", a+1));
    weapsidu.weaps_course_port = ((a+1)*100) + (b*10) + c;
    cerr<<weapsidu.weaps_course_port<<endl;
    if ( !(net->write_idu((char *)&weapsidu,SUB_Weaps_To_NPSNET_Type)) )
             cerr << "ERROR:\tCould not send Weaps IDU." << endl;
} // End Weaps::pt_crs_100s_add()


void Weaps::pt_crs_100s_minus ( Widget w, XtPointer callData )
{
    XmAnyCallbackStruct *cbs = (XmAnyCallbackStruct*) callData;

    //--- Comment out the following line when Weaps::pt_crs_100s_minus is implemented:

    //::VkUnimplemented ( w, "Weaps::pt_crs_100s_minus" );


    //--- Add application code for Weaps::pt_crs_100s_minus here:
    int a = atoi (XmTextFieldGetString(_pt_course_100s_textfield));
    int b = atoi (XmTextFieldGetString(_pt_course_10s_textfield));
    int c = atoi (XmTextFieldGetString(_pt_course_1s_textfield));
    if ( a == 0 )
      {
       a = 4;
       if ( b >= 6 )
         {
           XmTextFieldSetString(_pt_course_10s_textfield, (char *) VkFormat("%d", 0));
           XmTextFieldSetString(_pt_course_1s_textfield, (char *) VkFormat("%d", 0));
           b = 0;
           c = 0;
         }
      }
    XmTextFieldSetString(_pt_course_100s_textfield, (char *) VkFormat("%d", a-1));
    weapsidu.weaps_course_port = ((a-1)*100) + (b*10) + c;
    cerr<<weapsidu.weaps_course_port<<endl;
    if ( !(net->write_idu((char *)&weapsidu,SUB_Weaps_To_NPSNET_Type)) )
             cerr << "ERROR:\tCould not send Weaps IDU." << endl;
} // End Weaps::pt_crs_100s_minus()


void Weaps::pt_crs_10s_add ( Widget w, XtPointer callData )
{
    XmAnyCallbackStruct *cbs = (XmAnyCallbackStruct*) callData;

    //--- Comment out the following line when Weaps::pt_crs_10s_add is implemented:

    //::VkUnimplemented ( w, "Weaps::pt_crs_10s_add" );


    //--- Add application code for Weaps::pt_crs_10s_add here:
    int a = atoi (XmTextFieldGetString(_pt_course_100s_textfield));
    int b = atoi (XmTextFieldGetString(_pt_course_10s_textfield));
    int c = atoi (XmTextFieldGetString(_pt_course_1s_textfield));
    if (a < 3)
      {if ( b == 9 )
         b = -1;
      }
    else
      {if ( b >=5 )
         b = -1;
      }
    XmTextFieldSetString(_pt_course_10s_textfield, (char *) VkFormat("%d", b+1));
    weapsidu.weaps_course_port = (a*100) + ((b+1)*10) + c;
    cerr<<weapsidu.weaps_course_port<<endl;
    if ( !(net->write_idu((char *)&weapsidu,SUB_Weaps_To_NPSNET_Type)) )
             cerr << "ERROR:\tCould not send Weaps IDU." << endl;
} // End Weaps::pt_crs_10s_add()


void Weaps::pt_crs_10s_minus ( Widget w, XtPointer callData )
{
    XmAnyCallbackStruct *cbs = (XmAnyCallbackStruct*) callData;

    //--- Comment out the following line when Weaps::pt_crs_10s_minus is implemented:

    //::VkUnimplemented ( w, "Weaps::pt_crs_10s_minus" );


    //--- Add application code for Weaps::pt_crs_10s_minus here:
    int a = atoi (XmTextFieldGetString(_pt_course_100s_textfield));
    int b = atoi (XmTextFieldGetString(_pt_course_10s_textfield));
    int c = atoi (XmTextFieldGetString(_pt_course_1s_textfield));
    if ((atoi (XmTextFieldGetString(_pt_course_100s_textfield))) < 3)
      {if ( b == 0 )
         b = 10;
      }
    else
      {if ( b == 0 )
         b = 6;
       if ( b > 6 )
         b = 6;
      }
    XmTextFieldSetString(_pt_course_10s_textfield, (char *) VkFormat("%d", b-1));
    weapsidu.weaps_course_port = (a*100) + ((b-1)*10) + c;
    cerr<<weapsidu.weaps_course_port<<endl;
    if ( !(net->write_idu((char *)&weapsidu,SUB_Weaps_To_NPSNET_Type)) )
             cerr << "ERROR:\tCould not send Weaps IDU." << endl;
} // End Weaps::pt_crs_10s_minus()


void Weaps::pt_crs_1s_add ( Widget w, XtPointer callData )
{
    XmAnyCallbackStruct *cbs = (XmAnyCallbackStruct*) callData;

    //--- Comment out the following line when Weaps::pt_crs_1s_add is implemented:

    //::VkUnimplemented ( w, "Weaps::pt_crs_1s_add" );


    //--- Add application code for Weaps::pt_crs_1s_add here:
    int a = atoi (XmTextFieldGetString(_pt_course_100s_textfield));
    int b = atoi (XmTextFieldGetString(_pt_course_10s_textfield));
    int c = atoi (XmTextFieldGetString(_pt_course_1s_textfield));
    if ( c == 9 )
      c = -1;
    XmTextFieldSetString(_pt_course_1s_textfield, (char *) VkFormat("%d", c+1));
    weapsidu.weaps_course_port = (a*100) + (b*10) + c+1;
    cerr<<weapsidu.weaps_course_port<<endl;
    if ( !(net->write_idu((char *)&weapsidu,SUB_Weaps_To_NPSNET_Type)) )
             cerr << "ERROR:\tCould not send Weaps IDU." << endl;
} // End Weaps::pt_crs_1s_add()


void Weaps::pt_crs_1s_minus ( Widget w, XtPointer callData )
{
    XmAnyCallbackStruct *cbs = (XmAnyCallbackStruct*) callData;

    //--- Comment out the following line when Weaps::pt_crs_1s_minus is implemented:

    //::VkUnimplemented ( w, "Weaps::pt_crs_1s_minus" );


    //--- Add application code for Weaps::pt_crs_1s_minus here:
    int a = atoi (XmTextFieldGetString(_pt_course_100s_textfield));
    int b = atoi (XmTextFieldGetString(_pt_course_10s_textfield));
    int c = atoi (XmTextFieldGetString(_pt_course_1s_textfield));
    if ( c == 0 )
      c = 10;
    XmTextFieldSetString(_pt_course_1s_textfield, (char *) VkFormat("%d", c-1));
    weapsidu.weaps_course_port = (a*100) + (b*10) + c-1;
    cerr<<weapsidu.weaps_course_port<<endl;
    if ( !(net->write_idu((char *)&weapsidu,SUB_Weaps_To_NPSNET_Type)) )
             cerr << "ERROR:\tCould not send Weaps IDU." << endl;
} // End Weaps::pt_crs_1s_minus()


void Weaps::select_tlam1 ( Widget w, XtPointer callData )
{
    XmAnyCallbackStruct *cbs = (XmAnyCallbackStruct*) callData;

    //--- Comment out the following line when Weaps::select_tlam1 is implemented:

    //::VkUnimplemented ( w, "Weaps::select_tlam1" );


    //--- Add application code for Weaps::select_tlam1 here:
    weapsidu.weaps_select_tlam = 1;
    if ( !(net->write_idu((char *)&weapsidu,SUB_Weaps_To_NPSNET_Type)) )
             cerr << "ERROR:\tCould not send Weaps IDU." << endl;
} // End Weaps::select_tlam1()


void Weaps::select_tlam2 ( Widget w, XtPointer callData )
{
    XmAnyCallbackStruct *cbs = (XmAnyCallbackStruct*) callData;

    //--- Comment out the following line when Weaps::select_tlam2 is implemented:

    //::VkUnimplemented ( w, "Weaps::select_tlam2" );


    //--- Add application code for Weaps::select_tlam2 here:
    weapsidu.weaps_select_tlam = 2;
    if ( !(net->write_idu((char *)&weapsidu,SUB_Weaps_To_NPSNET_Type)) )
             cerr << "ERROR:\tCould not send Weaps IDU." << endl;
} // End Weaps::select_tlam2()


void Weaps::select_tlam3 ( Widget w, XtPointer callData )
{
    XmAnyCallbackStruct *cbs = (XmAnyCallbackStruct*) callData;

    //--- Comment out the following line when Weaps::select_tlam3 is implemented:

    //::VkUnimplemented ( w, "Weaps::select_tlam3" );


    //--- Add application code for Weaps::select_tlam3 here:
    weapsidu.weaps_select_tlam = 3;
    if ( !(net->write_idu((char *)&weapsidu,SUB_Weaps_To_NPSNET_Type)) )
             cerr << "ERROR:\tCould not send Weaps IDU." << endl;
} // End Weaps::select_tlam3()


void Weaps::select_tlam4 ( Widget w, XtPointer callData )
{
    XmAnyCallbackStruct *cbs = (XmAnyCallbackStruct*) callData;

    //--- Comment out the following line when Weaps::select_tlam4 is implemented:

    //::VkUnimplemented ( w, "Weaps::select_tlam4" );


    //--- Add application code for Weaps::select_tlam4 here:
    weapsidu.weaps_select_tlam = 4;
    if ( !(net->write_idu((char *)&weapsidu,SUB_Weaps_To_NPSNET_Type)) )
             cerr << "ERROR:\tCould not send Weaps IDU." << endl;
} // End Weaps::select_tlam4()


void Weaps::select_tlam5 ( Widget w, XtPointer callData )
{
    XmAnyCallbackStruct *cbs = (XmAnyCallbackStruct*) callData;

    //--- Comment out the following line when Weaps::select_tlam5 is implemented:

    //::VkUnimplemented ( w, "Weaps::select_tlam5" );


    //--- Add application code for Weaps::select_tlam5 here:
    weapsidu.weaps_select_tlam = 5;
    if ( !(net->write_idu((char *)&weapsidu,SUB_Weaps_To_NPSNET_Type)) )
             cerr << "ERROR:\tCould not send Weaps IDU." << endl;
} // End Weaps::select_tlam5()


void Weaps::select_tlam6 ( Widget w, XtPointer callData )
{
    XmAnyCallbackStruct *cbs = (XmAnyCallbackStruct*) callData;

    //--- Comment out the following line when Weaps::select_tlam6 is implemented:

    //::VkUnimplemented ( w, "Weaps::select_tlam6" );


    //--- Add application code for Weaps::select_tlam6 here:
    weapsidu.weaps_select_tlam = 6;
    if ( !(net->write_idu((char *)&weapsidu,SUB_Weaps_To_NPSNET_Type)) )
             cerr << "ERROR:\tCould not send Weaps IDU." << endl;
} // End Weaps::select_tlam6()


void Weaps::select_tube1 ( Widget w, XtPointer callData )
{
    XmAnyCallbackStruct *cbs = (XmAnyCallbackStruct*) callData;

    //--- Comment out the following line when Weaps::select_tube1 is implemented:

    //::VkUnimplemented ( w, "Weaps::select_tube1" );


    //--- Add application code for Weaps::select_tube1 here:
    weapsidu.weaps_select_tube_1or3 = 1;
    if ( !(net->write_idu((char *)&weapsidu,SUB_Weaps_To_NPSNET_Type)) )
             cerr << "ERROR:\tCould not send Weaps IDU." << endl;
} // End Weaps::select_tube1()


void Weaps::select_tube2 ( Widget w, XtPointer callData )
{
    XmAnyCallbackStruct *cbs = (XmAnyCallbackStruct*) callData;

    //--- Comment out the following line when Weaps::select_tube2 is implemented:

    //::VkUnimplemented ( w, "Weaps::select_tube2" );


    //--- Add application code for Weaps::select_tube2 here:
    weapsidu.weaps_select_tube_2or4 = 1;
    if ( !(net->write_idu((char *)&weapsidu,SUB_Weaps_To_NPSNET_Type)) )
             cerr << "ERROR:\tCould not send Weaps IDU." << endl;
} // End Weaps::select_tube2()


void Weaps::select_tube3 ( Widget w, XtPointer callData )
{
    XmAnyCallbackStruct *cbs = (XmAnyCallbackStruct*) callData;

    //--- Comment out the following line when Weaps::select_tube3 is implemented:

    //::VkUnimplemented ( w, "Weaps::select_tube3" );


    //--- Add application code for Weaps::select_tube3 here:
    weapsidu.weaps_select_tube_1or3 = 0;
    if ( !(net->write_idu((char *)&weapsidu,SUB_Weaps_To_NPSNET_Type)) )
             cerr << "ERROR:\tCould not send Weaps IDU." << endl;
} // End Weaps::select_tube3()


void Weaps::select_tube4 ( Widget w, XtPointer callData )
{
    XmAnyCallbackStruct *cbs = (XmAnyCallbackStruct*) callData;

    //--- Comment out the following line when Weaps::select_tube4 is implemented:

    //::VkUnimplemented ( w, "Weaps::select_tube4" );


    //--- Add application code for Weaps::select_tube4 here:
    weapsidu.weaps_select_tube_2or4 = 0;
    if ( !(net->write_idu((char *)&weapsidu,SUB_Weaps_To_NPSNET_Type)) )
             cerr << "ERROR:\tCould not send Weaps IDU." << endl;
} // End Weaps::select_tube4()


void Weaps::shoot_tlam ( Widget w, XtPointer callData )
{
    XmAnyCallbackStruct *cbs = (XmAnyCallbackStruct*) callData;

    //--- Comment out the following line when Weaps::shoot_tlam is implemented:

    //::VkUnimplemented ( w, "Weaps::shoot_tlam" );


    //--- Add application code for Weaps::shoot_tlam here:
    weapsidu.weaps_shoot_tlam = 1;
    if ( !(net->write_idu((char *)&weapsidu,SUB_Weaps_To_NPSNET_Type)) )
             cerr << "ERROR:\tCould not send Weaps IDU." << endl;
    weapsidu.weaps_shoot_tlam = 0;  //reset
} // End Weaps::shoot_tlam()


void Weaps::st_crs_100s_add ( Widget w, XtPointer callData )
{
    XmAnyCallbackStruct *cbs = (XmAnyCallbackStruct*) callData;

    //--- Comment out the following line when Weaps::st_crs_100s_add is implemented:

    //::VkUnimplemented ( w, "Weaps::st_crs_100s_add" );


    //--- Add application code for Weaps::st_crs_100s_add here:
    int a = atoi (XmTextFieldGetString(_st_course_100s_textfield));
    int b = atoi (XmTextFieldGetString(_st_course_10s_textfield));
    int c = atoi (XmTextFieldGetString(_st_course_1s_textfield));
    if ( a == 3 )
       a = -1;
    if ( (a+1) == 3 )
      {
       if ( b >= 6 )
         {
           XmTextFieldSetString(_st_course_10s_textfield, (char *) VkFormat("%d", 0));
           XmTextFieldSetString(_st_course_1s_textfield, (char *) VkFormat("%d", 0));
           b = 0;
           c = 0;
         }
      }
    XmTextFieldSetString(_st_course_100s_textfield, (char *) VkFormat("%d", a+1));
    weapsidu.weaps_course_stbd = ((a+1)*100) + (b*10) + c;
    cerr<<weapsidu.weaps_course_stbd<<endl;
    if ( !(net->write_idu((char *)&weapsidu,SUB_Weaps_To_NPSNET_Type)) )
             cerr << "ERROR:\tCould not send Weaps IDU." << endl;
} // End Weaps::st_crs_100s_add()


void Weaps::st_crs_100s_minus ( Widget w, XtPointer callData )
{
    XmAnyCallbackStruct *cbs = (XmAnyCallbackStruct*) callData;

    //--- Comment out the following line when Weaps::st_crs_100s_minus is implemented:

    //::VkUnimplemented ( w, "Weaps::st_crs_100s_minus" );


    //--- Add application code for Weaps::st_crs_100s_minus here:
    int a = atoi (XmTextFieldGetString(_st_course_100s_textfield));
    int b = atoi (XmTextFieldGetString(_st_course_10s_textfield));
    int c = atoi (XmTextFieldGetString(_st_course_1s_textfield));
    if ( a == 0 )
      {
       a = 4;
       if ( b >= 6 )
         {
           XmTextFieldSetString(_st_course_10s_textfield, (char *) VkFormat("%d", 0));
           XmTextFieldSetString(_st_course_1s_textfield, (char *) VkFormat("%d", 0));
           b = 0;
           c = 0;
         }
      }
    XmTextFieldSetString(_st_course_100s_textfield, (char *) VkFormat("%d", a-1));
    weapsidu.weaps_course_stbd = ((a-1)*100) + (b*10) + c;
    cerr<<weapsidu.weaps_course_stbd<<endl;
    if ( !(net->write_idu((char *)&weapsidu,SUB_Weaps_To_NPSNET_Type)) )
             cerr << "ERROR:\tCould not send Weaps IDU." << endl;
} // End Weaps::st_crs_100s_minus()


void Weaps::st_crs_10s_add ( Widget w, XtPointer callData )
{
    XmAnyCallbackStruct *cbs = (XmAnyCallbackStruct*) callData;

    //--- Comment out the following line when Weaps::st_crs_10s_add is implemented:

    //::VkUnimplemented ( w, "Weaps::st_crs_10s_add" );


    //--- Add application code for Weaps::st_crs_10s_add here:
    int a = atoi (XmTextFieldGetString(_st_course_100s_textfield));
    int b = atoi (XmTextFieldGetString(_st_course_10s_textfield));
    int c = atoi (XmTextFieldGetString(_st_course_1s_textfield));
    if (a < 3)
      {if ( b == 9 )
         b = -1;
      }
    else
      {if ( b >=5 )
         b = -1;
      }
    XmTextFieldSetString(_st_course_10s_textfield, (char *) VkFormat("%d", b+1));
    weapsidu.weaps_course_stbd = (a*100) + ((b+1)*10) + c;
    cerr<<weapsidu.weaps_course_stbd<<endl;
    if ( !(net->write_idu((char *)&weapsidu,SUB_Weaps_To_NPSNET_Type)) )
             cerr << "ERROR:\tCould not send Weaps IDU." << endl;
} // End Weaps::st_crs_10s_add()


void Weaps::st_crs_10s_minus ( Widget w, XtPointer callData )
{
    XmAnyCallbackStruct *cbs = (XmAnyCallbackStruct*) callData;

    //--- Comment out the following line when Weaps::st_crs_10s_minus is implemented:

    //::VkUnimplemented ( w, "Weaps::st_crs_10s_minus" );


    //--- Add application code for Weaps::st_crs_10s_minus here:
    int a = atoi (XmTextFieldGetString(_st_course_100s_textfield));
    int b = atoi (XmTextFieldGetString(_st_course_10s_textfield));
    int c = atoi (XmTextFieldGetString(_st_course_1s_textfield));
    if ((atoi (XmTextFieldGetString(_st_course_100s_textfield))) < 3)
      {if ( b == 0 )
         b = 10;
      }
    else
      {if ( b == 0 )
         b = 6;
       if ( b > 6 )
         b = 6;
      }
    XmTextFieldSetString(_st_course_10s_textfield, (char *) VkFormat("%d", b-1));
    weapsidu.weaps_course_stbd = (a*100) + ((b-1)*10) + c;
    cerr<<weapsidu.weaps_course_stbd<<endl;
    if ( !(net->write_idu((char *)&weapsidu,SUB_Weaps_To_NPSNET_Type)) )
             cerr << "ERROR:\tCould not send Weaps IDU." << endl;
} // End Weaps::st_crs_10s_minus()


void Weaps::st_crs_1s_add ( Widget w, XtPointer callData )
{
    XmAnyCallbackStruct *cbs = (XmAnyCallbackStruct*) callData;

    //--- Comment out the following line when Weaps::st_crs_1s_add is implemented:

   // ::VkUnimplemented ( w, "Weaps::st_crs_1s_add" );


    //--- Add application code for Weaps::st_crs_1s_add here:
    int a = atoi (XmTextFieldGetString(_st_course_100s_textfield));
    int b = atoi (XmTextFieldGetString(_st_course_10s_textfield));
    int c = atoi (XmTextFieldGetString(_st_course_1s_textfield));
    if ( c == 9 )
      c = -1;
    XmTextFieldSetString(_st_course_1s_textfield, (char *) VkFormat("%d", c+1));
    weapsidu.weaps_course_stbd = (a*100) + (b*10) + c+1;
    cerr<<weapsidu.weaps_course_stbd<<endl;
    if ( !(net->write_idu((char *)&weapsidu,SUB_Weaps_To_NPSNET_Type)) )
             cerr << "ERROR:\tCould not send Weaps IDU." << endl;
} // End Weaps::st_crs_1s_add()


void Weaps::st_crs_1s_minus ( Widget w, XtPointer callData )
{
    XmAnyCallbackStruct *cbs = (XmAnyCallbackStruct*) callData;

    //--- Comment out the following line when Weaps::st_crs_1s_minus is implemented:

    //::VkUnimplemented ( w, "Weaps::st_crs_1s_minus" );


    //--- Add application code for Weaps::st_crs_1s_minus here:
    int a = atoi (XmTextFieldGetString(_st_course_100s_textfield));
    int b = atoi (XmTextFieldGetString(_st_course_10s_textfield));
    int c = atoi (XmTextFieldGetString(_st_course_1s_textfield));
    if ( c == 0 )
      c = 10;
    XmTextFieldSetString(_st_course_1s_textfield, (char *) VkFormat("%d", c-1));
    weapsidu.weaps_course_stbd = (a*100) + (b*10) + c-1;
    cerr<<weapsidu.weaps_course_stbd<<endl;
    if ( !(net->write_idu((char *)&weapsidu,SUB_Weaps_To_NPSNET_Type)) )
             cerr << "ERROR:\tCould not send Weaps IDU." << endl;
} // End Weaps::st_crs_1s_minus()


void Weaps::stbd_tube_shoot ( Widget w, XtPointer callData )
{
    XmAnyCallbackStruct *cbs = (XmAnyCallbackStruct*) callData;

    //--- Comment out the following line when Weaps::stbd_tube_shoot is implemented:

    //::VkUnimplemented ( w, "Weaps::stbd_tube_shoot" );


    //--- Add application code for Weaps::stbd_tube_shoot here:
    weapsidu.weaps_shoot_stbd = 1;
    if ( !(net->write_idu((char *)&weapsidu,SUB_Weaps_To_NPSNET_Type)) )
             cerr << "ERROR:\tCould not send Weaps IDU." << endl;
    weapsidu.weaps_shoot_stbd = 0;  //reset
} // End Weaps::stbd_tube_shoot()




//---- End generated code section

