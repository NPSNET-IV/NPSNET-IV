
/////////////////////////////////////////////////////////////
//
// Source file for Helm
//
//    This file is generated by RapidApp
//
//    This class is derived from HelmUI which 
//    implements the user interface created in 
//    the interface builder. This class contains virtual
//    functions that are called from the user interface.
//
//    When you modify this source, limit your changes to 
//    modifying the emtpy virtual functions. You can also add
//    new functions below the "//--- End generated code section" markers
//
//    This will allow the builder to integrate changes more easily
//
//    This class is a ViewKit user interface "component".
//    For more information on how components are used, see the
//    "ViewKit Programmers' Manual", and the RapidApp
//    User's Guide.
////////////////////////////////////////////////////////////

#include "global.h"
#include "Helm.h"
#include <Vk/VkEZ.h>
#include <Sgm/Dial.h> 
#include <Xm/Form.h> 
#include <Xm/Frame.h> 
#include <Xm/Label.h> 
#include <Xm/RowColumn.h> 
#include <Xm/Separator.h> 
#include <Xm/TextF.h> 
#include <Xm/ToggleB.h> 
#include <Vk/VkResource.h>
#include <Vk/VkFormat.h> 
#include <iostream.h>

extern void VkUnimplemented(Widget, const char *);

///////////////////////////////////////////////////////////////////////////////
// The following non-container widgets are created by HelmUI and are
// available as protected data members inherited by this class
//
//  XmTextField		    _actual_h_speed_textfield
//  XmTextField		    _actual_h_depth_textfield
//  XmTextField		    _actual_h_course_textfield
//  XmLabel		    _actual_helm_label
//  XmSeparator		    _actual_helm_separator
//  XmLabel		    _actual_h_speed_label
//  XmLabel		    _actual_h_depth_label
//  XmLabel		    _actual_h_course_label
//  XmTextField		    _order_h_speed_textfield
//  XmTextField		    _order_h_depth_textfield
//  XmTextField		    _order_h_course_textfield
//  XmLabel		    _order_helm_label
//  XmSeparator		    _order_helm_separator
//  XmLabel		    _order_h_speed_label
//  XmLabel		    _order_h_depth_label
//  XmLabel		    _order_h_course_label
//  XmToggleButton		    _flank_toggle
//  XmToggleButton		    _full_toggle
//  XmToggleButton		    _stnd_toggle1
//  XmToggleButton		    _half_toggle
//  XmToggleButton		    _stop_toggle
//  XmToggleButton		    _back_half_toggle
//  XmToggleButton		    _back_stnd_toggle
//  XmToggleButton		    _back_full_toggle
//  XmTextField		    _depth_textfield
//  XmTextField		    _compass_textfield
//  XmLabel		    _depth_label
//  XmLabel		    _compass_label
//  SgDial		    _depth_dial
//  SgDial		    _compass_dial
//  SgDial		    _stern_plns_dial
//  XmTextField		    _rudder_textfield
//  XmTextField		    _fairwater_textfield
//  XmTextField		    _stern_textfield
//  XmLabel		    _rudder_label
//  XmLabel		    _fwtr_label
//  XmLabel		    _stern_label
//  SgDial		    _rudder_dial
//  SgDial		    _fwtr_planes_dial
//
///////////////////////////////////////////////////////////////////////////////


//---- End generated headers

extern NPSNETToSubIDU      *updatesubidu;
extern HelmToNPSNETIDU      helmidu;
extern SubOodToNPSNETIDU    oodidu;
extern WeapsToNPSNETIDU     weapsidu;
extern IDU_net_manager     *net;

//---- Helm Constructor

Helm::Helm(const char *name, Widget parent) : 
                   HelmUI(name, parent) 
{ 
    // This constructor is called after the component's interface has been built.

    //--- Add application code here:


} // End Constructor



Helm::Helm(const char *name) : 
                   HelmUI(name) 
 { 
    // This constructor calls HelmUI(name)
    // which does not create any widgets. Usually, this
    // constructor is not used

    //--- Add application code here:


} // End Constructor



Helm::~Helm()
{
    // The base class destructors are responsible for
    // destroying all widgets and objects used in this component.
    // Only additional items created directly in this class
    // need to be freed here.

    //--- Add application destructor code here:


}


const char * Helm::className() // classname
{
    return ("Helm");
} // End className()

void Helm::update() 
{   
    //actual depth,course,speed
    XmTextFieldSetString(_actual_h_depth_textfield,
                          (char *) VkFormat("%d",(int)updatesubidu->sub_depth));
    XmTextFieldSetString(_depth_textfield,
                          (char *) VkFormat("%d",(int)updatesubidu->sub_depth));
    EZ(_depth_dial) = (int)updatesubidu->sub_depth * 310 / 1000;
    XmTextFieldSetString(_actual_h_course_textfield,
                         (char *) VkFormat("%d", (int)updatesubidu->sub_course));
    XmTextFieldSetString(_compass_textfield,
                         (char *) VkFormat("%d", (int)updatesubidu->sub_course)); 
    EZ(_compass_dial) = (int)updatesubidu->sub_course;
    XmTextFieldSetString(_actual_h_speed_textfield,
                         (char *) VkFormat("%d", (int)updatesubidu->sub_speed));

    //ordered depth,course,speed
    XmTextFieldSetString(_order_h_depth_textfield,
                          (char *) VkFormat("%d",(int)updatesubidu->sub_ordered_depth));
    XmTextFieldSetString(_order_h_course_textfield,
                         (char *) VkFormat("%d", (int)updatesubidu->sub_ordered_course)); 
    switch ((int)updatesubidu->sub_ordered_speed)
        {
         case 4:
           XmTextFieldSetString(_order_h_speed_textfield, "FLNK"); 
         break;

         case 3 :
           XmTextFieldSetString(_order_h_speed_textfield, "FULL"); 
         break;

         case 2:
           XmTextFieldSetString(_order_h_speed_textfield, "STND"); 
         break;

         case 1:
           XmTextFieldSetString(_order_h_speed_textfield, "1/2"); 
         break;

         case 0:
           XmTextFieldSetString(_order_h_speed_textfield, "STOP"); 
         break;

         case -1:
           XmTextFieldSetString(_order_h_speed_textfield, "BK 1/2"); 
         break;

         case -2:
           XmTextFieldSetString(_order_h_speed_textfield, "BK STND"); 
         break;

         case -3:
           XmTextFieldSetString(_order_h_speed_textfield, "BK FULL"); 
         break;
         }
    //engine order telegraph
    switch ((int)updatesubidu->sub_helm_ordered_speed)
        {
         case 4:
           EZ(_flank_toggle) = 1;
           EZ(_full_toggle) = 0;
           EZ(_stnd_toggle1) = 0;
           EZ(_half_toggle) = 0;
           EZ(_stop_toggle) = 0;
           EZ(_back_half_toggle) = 0;
           EZ(_back_stnd_toggle) = 0;
           EZ(_back_full_toggle) = 0;
         break;

         case 3 :
           EZ(_flank_toggle) = 0;
           EZ(_full_toggle) = 1;
           EZ(_stnd_toggle1) = 0;
           EZ(_half_toggle) = 0;
           EZ(_stop_toggle) = 0;
           EZ(_back_half_toggle) = 0;
           EZ(_back_stnd_toggle) = 0;
           EZ(_back_full_toggle) = 0;
         break;

         case 2:
           EZ(_flank_toggle) = 0;
           EZ(_full_toggle) = 0;
           EZ(_stnd_toggle1) = 1;
           EZ(_half_toggle) = 0;
           EZ(_stop_toggle) = 0;
           EZ(_back_half_toggle) = 0;
           EZ(_back_stnd_toggle) = 0;
           EZ(_back_full_toggle) = 0;
         break;

         case 1:
           EZ(_flank_toggle) = 0;
           EZ(_full_toggle) = 0;
           EZ(_stnd_toggle1) = 0;
           EZ(_half_toggle) = 1;
           EZ(_stop_toggle) = 0;
           EZ(_back_half_toggle) = 0;
           EZ(_back_stnd_toggle) = 0;
           EZ(_back_full_toggle) = 0;
         break;

         case 0:
           EZ(_flank_toggle) = 0;
           EZ(_full_toggle) = 0;
           EZ(_stnd_toggle1) = 0;
           EZ(_half_toggle) = 0;
           EZ(_stop_toggle) = 1;
           EZ(_back_half_toggle) = 0;
           EZ(_back_stnd_toggle) = 0;
           EZ(_back_full_toggle) = 0;
         break;

         case -1:
           EZ(_flank_toggle) = 0;
           EZ(_full_toggle) = 0;
           EZ(_stnd_toggle1) = 0;
           EZ(_half_toggle) = 0;
           EZ(_stop_toggle) = 0;
           EZ(_back_half_toggle) = 1;
           EZ(_back_stnd_toggle) = 0;
           EZ(_back_full_toggle) = 0; 
         break;

         case -2:
          EZ(_flank_toggle) = 0;
           EZ(_full_toggle) = 0;
           EZ(_stnd_toggle1) = 0;
           EZ(_half_toggle) = 0;
           EZ(_stop_toggle) = 0;
           EZ(_back_half_toggle) = 0;
           EZ(_back_stnd_toggle) = 1;
           EZ(_back_full_toggle) = 0;
         break;

         case -3:
           EZ(_flank_toggle) = 0;
           EZ(_full_toggle) = 0;
           EZ(_stnd_toggle1) = 0;
           EZ(_half_toggle) = 0;
           EZ(_stop_toggle) = 0;
           EZ(_back_half_toggle) = 0;
           EZ(_back_stnd_toggle) = 0;
           EZ(_back_full_toggle) = 1; 
         break;
         }
    //stern planes, fwtr planes, rudder indicators
    XmTextFieldSetString(_stern_textfield,
                          (char *) VkFormat("%d",(int)updatesubidu->sub_sternplns_angle));
    EZ(_stern_plns_dial) = (int)updatesubidu->sub_sternplns_angle + 270; 
    XmTextFieldSetString(_fairwater_textfield,
                         (char *) VkFormat("%d", (int)updatesubidu->sub_fwtrplns_angle));
    EZ(_fwtr_planes_dial) = -(int)updatesubidu->sub_fwtrplns_angle * 2;
    XmTextFieldSetString(_rudder_textfield,
                         (char *) VkFormat("%d", (int)updatesubidu->sub_rudder_angle));
    EZ(_rudder_dial) = (-(int)updatesubidu->sub_rudder_angle * 2) + 180;
   
} // End update()

void Helm::back_full_actual ( Widget w, XtPointer callData )
{
    XmAnyCallbackStruct *cbs = (XmAnyCallbackStruct*) callData;

    //--- Comment out the following line when Helm::back_full_actual is implemented:

    //::VkUnimplemented ( w, "Helm::back_full_actual" );


    //--- Add application code for Helm::back_full_actual here:
    helmidu.helm_speed = -3;
    if ( !(net->write_idu((char *)&helmidu,SUB_Helm_To_NPSNET_Type)) )
             cerr << "ERROR:\tCould not send Helm IDU." << endl;
} // End Helm::back_full_actual()


void Helm::back_half_actual ( Widget w, XtPointer callData )
{
    XmAnyCallbackStruct *cbs = (XmAnyCallbackStruct*) callData;

    //--- Comment out the following line when Helm::back_half_actual is implemented:

    //::VkUnimplemented ( w, "Helm::back_half_actual" );


    //--- Add application code for Helm::back_half_actual here:
    helmidu.helm_speed = -1;
    if ( !(net->write_idu((char *)&helmidu,SUB_Helm_To_NPSNET_Type)) )
             cerr << "ERROR:\tCould not send Helm IDU." << endl;
} // End Helm::back_half_actual()


void Helm::back_stnd_actual ( Widget w, XtPointer callData )
{
    XmAnyCallbackStruct *cbs = (XmAnyCallbackStruct*) callData;

    //--- Comment out the following line when Helm::back_stnd_actual is implemented:

    //::VkUnimplemented ( w, "Helm::back_stnd_actual" );


    //--- Add application code for Helm::back_stnd_actual here:
    helmidu.helm_speed = -2;
    if ( !(net->write_idu((char *)&helmidu,SUB_Helm_To_NPSNET_Type)) )
             cerr << "ERROR:\tCould not send Helm IDU." << endl;
} // End Helm::back_stnd_actual()


void Helm::flank_actual ( Widget w, XtPointer callData )
{
    XmAnyCallbackStruct *cbs = (XmAnyCallbackStruct*) callData;

    //--- Comment out the following line when Helm::flank_actual is implemented:

    //::VkUnimplemented ( w, "Helm::flank_actual" );


    //--- Add application code for Helm::flank_actual here:
    helmidu.helm_speed = 4;
    if ( !(net->write_idu((char *)&helmidu,SUB_Helm_To_NPSNET_Type)) )
             cerr << "ERROR:\tCould not send Helm IDU." << endl;
} // End Helm::flank_actual()


void Helm::full_actual ( Widget w, XtPointer callData )
{
    XmAnyCallbackStruct *cbs = (XmAnyCallbackStruct*) callData;

    //--- Comment out the following line when Helm::full_actual is implemented:

    //::VkUnimplemented ( w, "Helm::full_actual" );


    //--- Add application code for Helm::full_actual here:
    helmidu.helm_speed = 3;
    if ( !(net->write_idu((char *)&helmidu,SUB_Helm_To_NPSNET_Type)) )
             cerr << "ERROR:\tCould not send Helm IDU." << endl;
} // End Helm::full_actual()


void Helm::half_actual ( Widget w, XtPointer callData )
{
    XmAnyCallbackStruct *cbs = (XmAnyCallbackStruct*) callData;

    //--- Comment out the following line when Helm::half_actual is implemented:

    //::VkUnimplemented ( w, "Helm::half_actual" );


    //--- Add application code for Helm::half_actual here:
    helmidu.helm_speed = 1;
    if ( !(net->write_idu((char *)&helmidu,SUB_Helm_To_NPSNET_Type)) )
             cerr << "ERROR:\tCould not send Helm IDU." << endl;
} // End Helm::half_actual()


void Helm::stnd_actual ( Widget w, XtPointer callData )
{
    XmAnyCallbackStruct *cbs = (XmAnyCallbackStruct*) callData;

    //--- Comment out the following line when Helm::stnd_actual is implemented:

    //::VkUnimplemented ( w, "Helm::stnd_actual" );


    //--- Add application code for Helm::stnd_actual here:
    helmidu.helm_speed = 2;
    if ( !(net->write_idu((char *)&helmidu,SUB_Helm_To_NPSNET_Type)) )
             cerr << "ERROR:\tCould not send Helm IDU." << endl;
} // End Helm::stnd_actual()


void Helm::stop_actual ( Widget w, XtPointer callData )
{
    XmAnyCallbackStruct *cbs = (XmAnyCallbackStruct*) callData;

    //--- Comment out the following line when Helm::stop_actual is implemented:

    //::VkUnimplemented ( w, "Helm::stop_actual" );


    //--- Add application code for Helm::stop_actual here:
    helmidu.helm_speed = 0;
    if ( !(net->write_idu((char *)&helmidu,SUB_Helm_To_NPSNET_Type)) )
             cerr << "ERROR:\tCould not send Helm IDU." << endl;
} // End Helm::stop_actual()




//---- End generated code section

