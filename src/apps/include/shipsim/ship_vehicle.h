#include "shipglobals.h"
#ifndef _SHIP_VEHICLE_H_
#define _SHIP_VEHICLE_H_



class VEHICLE {
protected:

    // The position and orientation for the vehicle is maintained in a pfCoord
    pfCoord  posture;    // location and orientation of vehicle
    pfVec3   velocity;
    pfVec3   acceleration;


    pfDCS    *hull;
    pfSwitch *models;
    float    lastPDU;  // last time PDU sent/received for this vehicle
    pfCoord  drpos;     // computed DR position/orientation
    pfCoord  drparam;  //Dead Reckoning parameters velocity/accelerations
    EntityID disname;  // site host entity for dis
    int      icontype;      // index into the icon/vehtype array
    EntityType    type;   // dis entity type
    ForceID force; //which side is it on
    unsigned int  status;  //32 bit field to discribe it's apperance
    DeadReckAlgorithm dralgo; //the dead Reckoning algorithm 
    int displaying_model;
    int birds_eye;
    float delTime;

public:

    int vid;    // local vehicle ID

    VEHICLE(int);
    ~VEHICLE();
    void del_vehicle(void);  //public distructor

    void create_entity(int,ForceID); //Initializes the pfDCS & pfSwitch
    virtual vtype gettype();   // what am i
    virtual movestat move(PASS_DATA*,CONTROL&);  // move the vehicle for the next frame
    virtual movestat moveDR(float,float);     //move routine for DR vehicles
    virtual void setPlayBackOmega(float) {}
    float *getposition();              //return current posture
    pfDCS *gethull();

    EntityID getdisname();
    ForceID getforce();
    void get_eyepoint ( pfVec3 & );
    void get_firepoint ( pfVec3 & );


    virtual void sendentitystate();
    virtual void entitystateupdate(EntityStatePDU *);
    void fillinDetonationPDU(DetonationPDU *,pfVec3);
    unsigned int getstatus();
    void init_posture(pfCoord &);
    void init_velocity(pfVec3 );
    pfVec3 *getvelocity();
    void assign_dralgo(DeadReckAlgorithm);
    void assign_entity_type(int);
    virtual void zeroThrust() { }
    void toggle_model();
    void teleport(pfCoord &,float &);
    void attach(pfCoord &, float &, float );
    void turnoff(void);
    void turnon(void);
    void birds_eye_view(void);
    virtual int check_collide(pfVec3 &,pfVec3 &, pfVec3 &, pfVec3 &, float &, float &);
    virtual void changeTheLights(long);
    virtual void playBackUpdate(pfCoord , pfVec3){}
    virtual void playBackDR(float){}
};

//SEA_VEH vehicle derived type
class SHIP_VEH : public VEHICLE{

public:
   SHIP_VEH(int id):VEHICLE(id){};
   ~SHIP_VEH() { cerr << "Ships - destructor\n";};

   movestat move(PASS_DATA*,CONTROL&);    // move the vehcile for the next frame
   movestat moveDR(float, float);
   vtype gettype();
   int check_collide(pfVec3 &,pfVec3 &, pfVec3 &, pfVec3 &, float &, float &);
   void changeTheLights(long);
   void sendentitystate();
   void entitystateupdate(EntityStatePDU *);
   void setPlayBackOmega(float);
   void playBackUpdate(pfCoord , pfVec3);
   void playBackDR(float);
   void zeroThrust();

protected:
float rudderAngle;                  //Rudder angle deflection
float mass;                         //Mass in kg
float thrustLeft;                   //Left engine thrust
float thrustRight;                  //Right engine thrust
float thrustTotal;                  //Total thrust
float torqueLeft;                   //Torque generated by left engine 
float torqueRight;                  //Torque generated by right engine
float torqueRudder;                 //Torque generated by rudder deflection
float torqueTotal;                  //Total torque
float thrustPerRPM;                 //Thrust per rpm
float propOffset;                   //Prop shaft lateral offset from CG
float rudderOffset;                 //Rudder longitudinal offset from CG 
double momentInertia;                //Mass moment of inertia
float alpha;                        //Angular acceleration
float omega;                        //Angular velocity
float linspeed;                     //Linear speed (scaler)
float linacceleration;              //Linear acceleration 
float portRPM;
float stbdRPM;
};



#endif
